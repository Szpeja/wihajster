#!/usr/bin/env ruby

require "rubygems"
require "bundler"

require File.expand_path '../../lib/wihajster', __FILE__

unless File.exist?("Gemfile")
  ENV['BUNDLE_GEMFILE'] = File.join(Wihajster.root, "Gemfile")
end
Bundler.require(:default, Wihajster.env)

Wihajster.load_libraries

class WihajsterApp
  include Singleton

  include Wihajster
  include Wihajster::Initializers
  include Wihajster::Reloader

  def console(profile="")
    prepare(profile)

    event_loop.run!(:non_block)
    pry self
  end

  def run(profile="")
    prepare(profile)

    event_loop.run!
  end

  def calibrate(profile="")
    prepare(profile)

    # We need to reload event loop so we clear all scripts
    # loaded by a #initialize_event_loop
    event_loop.reload!
    Wihajster.add_event_handler Wihajster::Calibration

    event_loop.run!
  end

  def events_test(profile="")
    Wihajster.profile = profile
    Wihajster.configuration.temporary!
    Wihajster.config.scripts.monitor = false

    prepare(profile)

    # We need to reload event loop so we clear all scripts
    # loaded by a #initialize_event_loop
    event_loop.reload!

    require 'wihajster/calibration/events_test'
    Wihajster.add_event_handler Wihajster::Calibration::EventsTest

    event_loop.run!
  end

  def test_run
    Wihajster.profile = "test_run"
    Wihajster.configuration.temporary!
    Wihajster.config.joystick.id = 0
    Wihajster.config.scripts.monitor = false

    prepare("test_run")

    event_loop.reload! # Clean event loop
    Thread.new{ sleep 0.3; event_loop.stop }
    event_loop.run!
  end

  protected

  def prepare(profile)
    Wihajster.profile = profile

    enable_reloading

    initialize_rubygame
    initialize_joystick(config.joystick.id)
    initialize_printer(config.printer.device, config.printer.speed)
    initialize_scripts(profile, config.scripts.monitor)
  end
end

def start(app)
  action = ARGV[0] || "run"
  methods = app.public_methods(false)
  actions = methods.select{|m| m.to_s.include?(action) }

  if actions.length == 1
    method = actions.first
    begin                                                                                                                                                   
      app.send(method, *ARGV[1..-1])
    rescue ArgumentError => e
      $stderr.puts "Could not call action #{method} - #{e}"
      exit 2
    rescue => e
      $stderr.puts "Failed to load Wihajster"
      $stderr.puts "#{e.class.name} #{e}\n  #{e.backtrace.join("\n  ")}"
      exit 1
    end
  else
    puts "Usage: #{__FILE__} [action]"
    puts "\nActions:"
    methods.each do |a| 
      params = 
        app.method(a).parameters.map do |t, arg|
          case t
          when :req then arg.to_s
          when :opt then "[#{arg}]"
          when :rest then "[*#{arg}]"
          end
        end.join(" ")

      puts "  #{a} #{params}"
    end
  end
  
  app
end

start WihajsterApp.instance
