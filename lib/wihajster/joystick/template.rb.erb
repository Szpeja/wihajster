# encoding: utf-8
module JoystickEvents
  include Wihajster
  include Wihajster::GCode::Commands

  # Called each time module is loaded.
  def self.extended(base)
    Wihajster.ui.log :extended, "Joystick events loaded."
  end
    
  # Called ONCE when joystick button is pressed.
  def joystick_button_pressed(event)
    super # Call other event handlers

    case event.button<% @buttons.each do |id, description| %>
    when <%= id.inspect %> # Button <%= description %>
      ui.say "Button <%= description %> pressed."
    <% end %>
    end
  end

  <% if @hats.length > 0 %>
  # Called when joystick hat is moved.
  #
  # Event parameters:
  #
  # hat:: (0..3)
  # direction:: [nil, :up, :down, :left, :right]
  # horizontal:: [0, -1, 1]
  # vertical:: [0, -1, 1]
  #
  def joystick_hat_moved(event)
    super # Call other event handlers

    case event.hat<% @hats.each do |id, description| %>
    when <%= id.inspect %> # <%= description %>
      case event.direction
      when :up
      when :down
      when :left
      when :right
      when nil
      end
    <% end %>end
  end
  <% end %><% if @axis.length > 0 %>

  # Called when joystick axis position is moved.
  #
  # Event parameters 
  #
  # axis:: (0..5)
  # value:: (-1.0..1.0)
  #
  def joystick_axis_moved(event)
    super # Call other event handlers

    case event.axis<% @axis.each do |id, description| %>
    when <%= id.inspect %> # <%= description %>
    <% end %>
    end
  end
  <% end %>

  # Called every tick/frame (10 times per second) when joystick button is pressed.
  #
  # Second parameter gives us actual number of milliseconds passed since last tick 
  # (should be around 100), and can be used to fine tune length of movement
  def joystick_button_held(event, milliseconds)
    super # Call other events

    case event.button<% @buttons.each do |id, description| %>
    when <%= id.inspect %> # Button <%= description %>
    <% end %>end
  end

  # Called when every timer tick (by default every 100 milliseconds).
  # Can be used to move based on axis position, report temperature etc.
  # 
  # Event parameters:
  # 
  # milliseconds: The time since the last tick, in milliseconds.
  # seconds: time since the last tick, in seconds. 
  #
  def clock_ticked(tick_event)
    super # Call other event handlers

    strong_axis = axis_position.select{|axis, value| value > 0.5}
    if strong_axis.any?
      # Move in direction of strong axis
    end  
  end

  Wihajster.add_event_handler(self)
end
